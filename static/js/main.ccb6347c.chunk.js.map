{"version":3,"sources":["logo.svg","js/Card.js","js/App.js","js/serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pictures","fetch","then","response","json","j","picArray","photos","photo","map","pic","srcPath","farm","server","id","secret","url","owner","authourURL","title","desc","description","_content","tags","author","ownername","react_default","a","createElement","className","key","alt","src","es","lines","href","setState","bind","Component","App","logo","js_Card","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOCgFzBC,cA3EX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,SAAU,IAHDR,mFASXS,MAAM,6MACLC,KAAK,SAASC,GACb,OAAOA,EAASC,SAEjBF,KAAK,SAASG,GAEb,IAAIC,EAAWD,EAAEE,OAAOC,MAAMC,IAAI,SAACC,GAE/B,IAAIC,EAAU,eAAeD,EAAIE,KAAK,qBAAqBF,EAAIG,OAAO,IAAIH,EAAII,GAAG,IAAIJ,EAAIK,OAAO,OAC5FC,EAAM,iCAAiCN,EAAIO,MAAM,IAAIP,EAAII,GACzDI,EAAa,iCAAiCR,EAAIO,MAClDE,EAAQT,EAAIS,MACZC,EAAOV,EAAIW,YAAYC,SACvBC,EAAOb,EAAIa,KACXC,EAASd,EAAIe,UAInB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,IAAKpB,EAAII,IAC1CY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeE,IAAI,SAASC,IAAKrB,KAEpDe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBC,MAAO,GACrBR,EAAAC,EAAAC,cAAA,KAAGO,KAAMnB,EAAKa,UAAU,wBAAuBH,EAAAC,EAAAC,cAAA,UAAKT,KAGpDO,EAAAC,EAAAC,cAAA,KAAGO,KAAMjB,EAAYW,UAAU,uBAAsBH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAJ,IAAqBJ,IAE1EE,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBC,MAAO,GACrBR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBT,IAGtCM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,mBAE7BF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBC,MAAO,GACrBR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBN,SAQ9C5B,KAAKyC,SAAS,CAACpC,SAAUM,KAEzB+B,KAAK1C,wCAKT,OACI+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZlC,KAAKI,MAAMC,kBAnELsC,8BC8BJC,mLA1BX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAyBH,EAAAC,EAAAC,cAAA,OAAKI,IAAKQ,IAAMX,UAAU,WAAWE,IAAI,WAEnFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,uBAKpCF,EAAAC,EAAAC,cAACa,EAAD,cAnBUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.ccb6347c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5716f491.svg\";","import React, { Component } from 'react';\r\nimport TruncateMarkup from 'react-truncate-markup';\r\n\r\n\r\nclass Card extends Component {\r\n    constructor(){\r\n      super();\r\n      this.state = {\r\n        pictures: [],\r\n      };\r\n    }\r\n    componentDidMount(){\r\n     // alert(process.env.REACT_APP_API_KEY);\r\n\r\n      fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key='+process.env.REACT_APP_API_KEY+'&tags=london&extras=description,tags,owner_name&per_page=15&page=1&format=json&nojsoncallback=1')\r\n      .then(function(response){\r\n        return response.json();\r\n      })\r\n      .then(function(j){\r\n        //alert(JSON.stringify(j));\r\n        let picArray = j.photos.photo.map((pic) => {\r\n\r\n            var srcPath = 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\r\n            var url = 'https://www.flickr.com/photos/'+pic.owner+'/'+pic.id;\r\n            var authourURL = 'https://www.flickr.com/photos/'+pic.owner;\r\n            var title = pic.title;\r\n            var desc = pic.description._content;\r\n            var tags = pic.tags; \r\n            var author = pic.ownername;  \r\n\r\n\r\n\r\n          return(\r\n            <div className=\"col-lg-4 col-md-6\" key={pic.id} >\r\n              <div className=\"card card-author border-dark\" >\r\n                  <div className=\"card-img-wrp\">\r\n                    <img className=\"card-img-top\" alt=\"london\" src={srcPath}></img>\r\n                  </div>\r\n                <div className=\"card-body\">\r\n\r\n                <TruncateMarkup lines={1}>\r\n                  <a href={url} className=\"card-link card-title\"><h2>{title}</h2></a>                    \r\n                </TruncateMarkup>\r\n\r\n                  <a href={authourURL} className=\"card-link card-name\"><h3><span>By</span> {author}</h3></a>\r\n\r\n                  <TruncateMarkup lines={3}>\r\n                    <p className=\"card-text card-desc\">{desc}</p> \r\n                  </TruncateMarkup>\r\n\r\n                  <p className=\"card-subtitle\"><b>#Tags</b></p>\r\n\r\n                  <TruncateMarkup lines={3}>\r\n                    <p className=\"badge badge-light\">{tags}</p>\r\n                  </TruncateMarkup>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n\r\n        this.setState({pictures: picArray});  \r\n\r\n      }.bind(this))\r\n    }\r\n  \r\n\r\n  render() {\r\n    return (\r\n        <div className=\"Card container\">\r\n          <div className=\"row\" >\r\n            {this.state.pictures}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\nimport Card from './Card';\nimport logo from '../logo.svg';\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"container App-header\">\n          <div className=\"row\">\n            <div className=\"col-lg-3 col-md-4\">\n              <div className=\"justify-content-center\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            </div>\n            <div className=\"col-lg-9 col-md-8\">\n                <div className=\"justify-content-center\">\n                  <h1 className=\"App-title\">Welcomme to Flickr API task test</h1>\n                  <p className=\"text-right\"><i >#Tito</i></p>\n                </div>\n            </div>\n          </div>\n        </header>\n        <Card />\n      </div>\n\n    );\n  }\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport './scss/App.scss';\nimport 'jquery/dist/jquery.js';\nimport 'bootstrap/dist/js/bootstrap.js'\n\nimport App from './js/App';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}